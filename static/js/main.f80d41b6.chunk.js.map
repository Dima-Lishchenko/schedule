{"version":3,"sources":["components/Gauge/Gauge.tsx","utils/matchType.ts","components/Match/Match.tsx","containers/SchedulePage/SchedulePage.tsx","index.tsx","components/App/App.tsx"],"names":["Gauge","status","firstSpinner","React","createRef","secondSpinner","thirdSpinner","fourthSpinner","useEffect","percentage","Number","progress","Math","floor","angle","current","style","transform","renderProgress","className","ref","timeConverter","timestamp","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","getDayEnding","dayNumber","Match","memo","matches","length","map","match","id","country","type","homeScore","awayScore","homeTeam","awayTeam","liveStatus","key","competition","timeStamp","matchType","name","SchedulePage","useState","data","setData","filteredData","filterData","currentFilter","setCurrentFilter","fetch","then","res","a","json","response","textAlign","onClick","result","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f80d41b6.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nimport './Gauge.sass';\r\n\r\ninterface IStatus {\r\n  status: number | string;\r\n}\r\n\r\nexport const Gauge = ({ status }: IStatus) => {\r\n  const firstSpinner = React.createRef<HTMLDivElement>();\r\n  const secondSpinner = React.createRef<HTMLDivElement>();\r\n  const thirdSpinner = React.createRef<HTMLDivElement>();\r\n  const fourthSpinner = React.createRef<HTMLDivElement>();\r\n\r\n  const renderProgress = (percentage: number) => {\r\n    const progress = Math.floor(percentage);\r\n    if (progress < 25) {\r\n      const angle = -90 + (progress / 100) * 360;\r\n      firstSpinner.current!.style.transform = `rotate(${angle}deg)`;\r\n    } else if (progress >= 25 && progress < 50) {\r\n      const angle = -90 + ((progress - 25) / 100) * 360;\r\n      firstSpinner.current!.style.transform = 'rotate(0deg)';\r\n      secondSpinner.current!.style.transform = `rotate(${angle}deg)`;\r\n    } else if (progress >= 50 && progress < 75) {\r\n      const angle = -90 + ((progress - 50) / 100) * 360;\r\n      firstSpinner.current!.style.transform = 'rotate(0deg)';\r\n      secondSpinner.current!.style.transform = 'rotate(0deg)';\r\n      thirdSpinner.current!.style.transform = `rotate(${angle}deg)`;\r\n    } else if (progress >= 75 && progress <= 100) {\r\n      const angle = -90 + ((progress - 75) / 100) * 360;\r\n      firstSpinner.current!.style.transform = 'rotate(0deg)';\r\n      secondSpinner.current!.style.transform = 'rotate(0deg)';\r\n      thirdSpinner.current!.style.transform = 'rotate(0deg)';\r\n      fourthSpinner.current!.style.transform = `rotate(${angle}deg)`;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // set current progress percentage\r\n    if (status) {\r\n      let percentage;\r\n      if (Number(status)) {\r\n        percentage = status;\r\n      } else if (status === 'FT') {\r\n        percentage = 100;\r\n      } else if (status === 'HT') {\r\n        percentage = 50;\r\n      } else {\r\n        percentage = 0;\r\n      }\r\n      renderProgress(Number(percentage) || 0);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"loader\">\r\n      <div className=\"loader-bg\">\r\n        <div className={`text ${status === 'FT' && 'FT'} ${status === 'HT' && 'HT'}`}>\r\n          {(Number(status) || status === 'FT' || status === 'HT' || status === '') && status}\r\n        </div>\r\n      </div>\r\n      <div className=\"spinner-holder-one animate-0-25-a\">\r\n        <div className=\"spinner-holder-two animate-0-25-b\" ref={firstSpinner}>\r\n          <div className=\"loader-spinner\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"spinner-holder-one animate-25-50-a\">\r\n        <div className=\"spinner-holder-two animate-25-50-b\" ref={secondSpinner}>\r\n          <div className=\"loader-spinner\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"spinner-holder-one animate-50-75-a\">\r\n        <div className=\"spinner-holder-two animate-50-75-b\" ref={thirdSpinner}>\r\n          <div className=\"loader-spinner\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"spinner-holder-one animate-75-100-a\">\r\n        <div className=\"spinner-holder-two animate-75-100-b\" ref={fourthSpinner}>\r\n          <div className=\"loader-spinner\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","export const matchType = (type: string, timeStamp: number) => {\r\n  switch (type) {\r\n    case 'finished':\r\n      return 'ended';\r\n    case 'inprogress':\r\n      return 'live';\r\n    case 'canceled':\r\n      return 'cancelled';\r\n    case 'notstarted':\r\n      return `${timeConverter(timeStamp)}`;\r\n\r\n    default:\r\n      return type;\r\n  }\r\n};\r\n\r\nconst timeConverter = (timestamp: number) => {\r\n  const date = new Date(timestamp * 1000);\r\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n  const year = date.getFullYear();\r\n  const month = months[date.getMonth()];\r\n  const day = date.getDate();\r\n  const hour = date.getHours();\r\n  const min = date.getMinutes() === 0 ? `${date.getMinutes() + '0'}` : date.getMinutes();\r\n  return `${month} ${day}${getDayEnding(day)}  ${year} ${hour} : ${min}`;\r\n};\r\n\r\nconst getDayEnding = (dayNumber: number) => {\r\n  switch (dayNumber) {\r\n    case 1:\r\n      return 'st';\r\n    case 2:\r\n      return 'nd';\r\n    case 3:\r\n      return 'rd';\r\n    default:\r\n      return 'th';\r\n  }\r\n};\r\n","import React  from \"react\";\r\n\r\nimport { Gauge } from 'components/Gauge';\r\nimport './Match.sass';\r\n\r\nimport { IMatch } from 'typings/match';\r\nimport { matchType } from 'utils/matchType';\r\n\r\nexport interface IMatchesC {\r\n  matches: IMatch[];\r\n}\r\n\r\nexport const Match = React.memo(({ matches }: IMatchesC) => {\r\n  return (\r\n    <section className=\"matches row\">\r\n      {matches.length > 0 &&\r\n        matches.map((match: IMatch) => {\r\n          const {\r\n            id,\r\n            country,\r\n            status: { type },\r\n            homeScore,\r\n            awayScore,\r\n            homeTeam,\r\n            awayTeam,\r\n            liveStatus,\r\n            timestamp,\r\n          } = match;\r\n\r\n          return (\r\n            <div className=\"col-12 col-md-6 col-lg-4 col-xl-3\" key={id}>\r\n              <div className=\"info\">\r\n                <h4 className=\"country\">{country}</h4>\r\n                <h2>{match.competition}</h2>\r\n                <h5 className={`status ${type}`}>{matchType(type, timestamp)}</h5>\r\n                <div className=\"score\">\r\n                  {homeScore.current || 0} - {awayScore.current || 0}\r\n                </div>\r\n                <div className=\"result row\">\r\n                  <div className=\"team col-5\">\r\n                    <p>{homeTeam.name}</p>\r\n                  </div>\r\n                  <div className=\"time col-2\">\r\n                    <Gauge status={liveStatus} />\r\n                  </div>\r\n                  <div className=\"team col-5\">\r\n                    <p>{awayTeam.name}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n    </section>\r\n  );\r\n});","import React, { useEffect, useState } from 'react';\r\n\r\nimport 'assets/styles/grid.sass';\r\nimport './SchedulePage.sass';\r\n\r\nimport { Match } from 'components/Match';\r\nimport { IMatch } from 'typings/match';\r\n\r\nexport const SchedulePage = () => {\r\n  const [data, setData] = useState<IMatch[]>([]);\r\n  const [filteredData, filterData] = useState<IMatch[]>([]);\r\n  const [currentFilter, setCurrentFilter] = useState<'all' | 'inprogress' | 'notstarted' | 'finished'>('all');\r\n\r\n  const allMatches = () => {\r\n    filterData(data);\r\n    setCurrentFilter('all');\r\n  };\r\n\r\n  const onlyFinished = () => {\r\n    if (data.length > 0) {\r\n      const result = data.filter((match: IMatch) => match.status.type === 'finished');\r\n      filterData(result);\r\n    }\r\n    setCurrentFilter('finished');\r\n  };\r\n\r\n  const liveMatches = () => {\r\n    if (data.length > 0) {\r\n      const result = data.filter((match: IMatch) => match.status.type === 'inprogress');\r\n      filterData(result);\r\n    }\r\n    setCurrentFilter('inprogress');\r\n  };\r\n\r\n  const upComingMatches = () => {\r\n    if (data.length > 0) {\r\n      const result: IMatch[] = data.filter((match: IMatch) => match.status.type === 'notstarted');\r\n      filterData(result);\r\n    }\r\n    setCurrentFilter('notstarted');\r\n  };\r\n\r\n  const getData = () => {\r\n    // there is no need to import react-redux with action, reducer, saga middleware if we do not have event real API call\r\n    // but good practice would be move any side effects to saga and import it from store with the help of useSelector hook\r\n    fetch('./sports.json').then(async res => {\r\n      const response: IMatch[] = await res.json();\r\n      setData(response);\r\n      filterData(response);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"schedule\">\r\n      <div className=\"row\">\r\n        <div className=\"filters col-12\" style={{ textAlign: 'center' }}>\r\n          <button className={`all ${currentFilter === 'all' && 'active'}`} onClick={allMatches}>\r\n            ALL\r\n          </button>\r\n          <button className={`result ${currentFilter === 'finished' && 'active'}`} onClick={onlyFinished}>\r\n            Result\r\n          </button>\r\n          <button className={`upcoming ${currentFilter === 'notstarted' && 'active'}`} onClick={upComingMatches}>\r\n            Upcoming\r\n          </button>\r\n          <button className={`live ${currentFilter === 'inprogress' && 'active'}`} onClick={liveMatches}>\r\n            Live\r\n          </button>\r\n          <h2>Current count: {filteredData.length}</h2>\r\n        </div>\r\n      </div>\r\n      <Match matches={filteredData} />\r\n    </div>\r\n  );\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from 'components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\n\nimport { SchedulePage } from 'containers/SchedulePage';\n\nimport 'assets/styles/grid.sass';\nimport './App.sass';\n\nexport const App = () => {\n  return <SchedulePage />;\n};\n"],"sourceRoot":""}